<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:osgi="http://www.springframework.org/schema/osgi"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi-1.2.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		">

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="plugins"> <ref bean="paginationInterceptor" /> </property> -->
		<property name="mapperLocations" value="classpath*:META-INF/mybatis/**/Mysql_ArgumentMapper.xml"></property>
	</bean>
	<!-- <bean id="paginationInterceptor" class="com.isoftstone.auth.common.pagenation.PagePlugin"> 
		<property name="dialect" value="mysql" /> <property name="pageSqlId" value="_listPage" 
		/> </bean> -->

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="ajax" value="application/json" />
			</map>
		</property>
		<property name="viewResolvers">
			<list>
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver" />
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
			</list>
		</property>
	</bean>

	<!-- <bean id="parametersMapBuilder"
		class="com.isoftstone.framework.core.query.mybatis.MySqlParametersMapBuilder" /> -->
    
    <bean id="systemEnv" class="com.runningfish.spmk.framework.plugin.SystemENV"
		scope="singleton">
		<constructor-arg value="sys1" /><!--系统id -->
		<constructor-arg value="org12" /><!--orgId 暂时可以忽略不管 -->
	</bean>

	<bean class="com.runningfish.spmk.framework.plugin.InitCache">
		<property name="cacheType" value="1" />
	</bean>
    

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="around*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="batchInsert*" propagation="REQUIRED"
				read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="batch*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="modify*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="select*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 把事务控制在Service层 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="tx"
			expression="execution(public * com.runningfish.*.service..*.*(..))" />
		<aop:advisor pointcut-ref="tx" advice-ref="txAdvice" />
	</aop:config>

	<!-- 数据类型转换 -->
	<bean name="conversionService"
		class="org.springframework.format.support.DefaultFormattingConversionService">
		<constructor-arg index="0">
			<null></null>
		</constructor-arg>
		<constructor-arg index="1">
			<value>true</value>
		</constructor-arg>
	</bean>
<!-- 
	<bean id="logAspect" class="com.isoftstone.component.operlogs.internal.LogService"></bean>

	<aop:config proxy-target-class="true">
		<aop:aspect id="dictLogAspect" ref="logAspect">
			<aop:pointcut
				expression="execution(public * com.isoftstone.component.arguments.internal..*.*(..))"
				id="dictLogPoint" />
			<aop:around method="around" pointcut-ref="dictLogPoint" />
		</aop:aspect>
	</aop:config>
 -->
	<!-- 系统日志切面 -->
	<bean name="sysLogAdvice" class="com.runningfish.spmk.common.SysLogAdvice" />
	<aop:config proxy-target-class="true">
		<!-- com.runningfish包及其子包下的所有service包及其子包下的internal包下的所有方法 -->
		<aop:pointcut id="sysLogPointcut"
			expression="(execution(public * com.runningfish..*.service..*.internal.*.*(..))) or (execution(public * com.runningfish.spmk.web..*.*.*(..)))" />
		<aop:advisor pointcut-ref="sysLogPointcut" advice-ref="sysLogAdvice" />
	</aop:config>
	
	<bean id="springContextUtil"
		class="com.runningfish.spmk.framework.plugin.SpringContextUtil"></bean>
		
	<bean id="redis" class="com.runningfish.spmk.web.person.workbeach.controller.InitRedis" init-method="init" />
	
	
</beans>
